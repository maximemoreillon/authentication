apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APPLICATION_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${APPLICATION_NAME}
  template:
    metadata:
      labels:
        app: ${APPLICATION_NAME}
    spec:
      containers:
      - name: ${APPLICATION_NAME}
        image: ${CONTAINER_REGISTRY}/${APPLICATION_NAME}
        ports:
        - containerPort: 80
---
# Service to make application accessible from outside the cluster
# This is now done using an Ingress
apiVersion: v1
kind: Service
metadata:
  name: ${APPLICATION_NAME}
spec:
  type: ClusterIP
  selector:
    app: ${APPLICATION_NAME}
  ports:
  - port: 80
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: ${APPLICATION_NAME} # The Certificate is named after the application
spec:
  secretName: ${APPLICATION_NAME}
  issuerRef:
    name: letsencrypt-prod # This issuer has been created manually
    kind: ClusterIssuer
  dnsNames:
  - ${CERTIFICATE_DOMAIN}
  acme:
    config:
    - http01:
        ingress: ${APPLICATION_NAME} # Name of the ingress, named after the application
      domains:
      - ${CERTIFICATE_DOMAIN}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${APPLICATION_NAME} # Name of the ingress, named after the application
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod" # This is necessary, no idea why
spec:
  tls:
  - hosts:
    - ${CERTIFICATE_DOMAIN}
    secretName: ${APPLICATION_NAME} # Name of the secret, i.e. the certificates
  rules:
  - host: ${CERTIFICATE_DOMAIN}
    http:
      paths:
      - path: /
        backend:
          serviceName: ${APPLICATION_NAME} # Name of the service, named after the app
          servicePort: 80
