stages:
  - build
  - test
  - deploy

variables:
  APPLICATION_NAME: authentication
  CONTAINER_REGISTRY: ${DOCKER_HUB_USERNAME}
  CONTAINER_IMAGE: ${CONTAINER_REGISTRY}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TEST: ${CONTAINER_IMAGE}:test
  CONTAINER_IMAGE_LATEST: ${CONTAINER_IMAGE}:latest
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CI_COMMIT_SHORT_SHA}
  K8S_INGRESS_DOMAIN: api.authentication.maximemoreillon.com

# Needed for Docker in docker build
services:
  - name: docker:19.03.12-dind

build:
  stage: build
  tags:
    - dind

  before_script:
    # Docker hub login
    - >
      echo "${DOCKER_HUB_PASSWORD}" |
      docker login
      --username ${DOCKER_HUB_USERNAME}
      --password-stdin
    # Creating network for TDD
    - docker network create ${TEST_NETWORK}
    - >
      docker run
      -d
      --rm
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      --env NEO4J_AUTH=none
      neo4j:3.5-community
    - sleep 60 # Wait for Neo4J to become available
    # Deploy a user-manager / authentication system
    - >
      docker run
      -d
      --rm
      --name ${TEST_USER_MANAGER}
      --network ${TEST_NETWORK}
      --hostname ${TEST_USER_MANAGER}
      --env NEO4J_URL=bolt://${TEST_DB}:7687
      --env NEO4J_USERNAME=neo4j
      --env NEO4J_PASSWORD=neo4j
      --env JWT_SECRET=keyboardcat
      moreillon/employee-manager


  script:
    - >
      docker run
      --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      --env NEO4J_URL=bolt://${TEST_DB}:7687
      --env IDENTIFICATION_URL=http://${TEST_USER_MANAGER}/v2/users/self
      --env LOGIN_URL=http://${TEST_USER_MANAGER}/auth/login
      --env TEST_USER_USERNAME=admin
      --env TEST_USER_PASSWORD=admin
      ${CONTAINER_IMAGE_TEST}
      npm run coverage
    # If pass, then push the images
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_TAGGED}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_LATEST}
    # Pushing
    - docker push ${CONTAINER_IMAGE_TAGGED}
    - docker push ${CONTAINER_IMAGE_LATEST}

deploy:
  stage: deploy
  tags:
    - moreillon
  only:
    - master
  script:
    - envsubst < kubernetes_manifest.yml | kubectl apply -f -
    - kubectl rollout restart deployment/${APPLICATION_NAME}
  environment:
    name: production
    kubernetes:
      namespace: ${KUBERNETES_NAMESPACE}
